<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WPF混合开发之WebView2(二) WebView2的简单使用</title>
      <link href="2022/06/30/wpf-hun-he-kai-fa-zhi-webview2-er-webview2-de-jian-dan-shi-yong/"/>
      <url>2022/06/30/wpf-hun-he-kai-fa-zhi-webview2-er-webview2-de-jian-dan-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 class="bamboo-h " id="引言">引言</h2><br/><p>在上一篇文章中，我们介绍了WebView2的环境搭建（<a href="https://znoliver.github.io/2022/06/28/wpf-hun-he-kai-fa-zhi-webview2-yi-jian-jie-ji-huan-jing-da-jian/">点此前往</a>），在这一章节，我们将使用WebView2简单搭建一个WPF程序，在程序中加载百度搜索页面，废话不多说，直接上流程。</p><h2 class="bamboo-h " id="工程建立及WebView2包安装">工程建立及WebView2包安装</h2><br/><h3 class="bamboo-h-b" id="建立WPF工程" style="color:!important">建立WPF工程</h3><div></div><p>建立WPF工程步骤很简单，在此不再截图，直接上步骤：</p><ol><li>打开Visual Stido 2022（博主使用的是vs 2022,其他版本也可）</li><li>选择创建新项目</li><li>在项目模板处选择WPF应用程序</li><li>输入项目名称</li><li>选择项目框架</li><li>创建完成</li></ol><div class="note info"><p>选择版本时需要注意，vs 2022中有两种WPF工程模板：WPF应用程序和WPF应用，其中WPF应用程序是使用.net core/.net 6框架的，WPF应用使用.Net Framework框架，大家根据自己的需求创建即可</p></div><h3 class="bamboo-h-b" id="安装WebView2 Nuget包" style="color:!important">安装WebView2 Nuget包</h3><div></div><ol><li>打开Nuget包管理器：<code>选中项目-&gt;右键-&gt;选择“管理NuGet程序包”</code>。<br><img src="https://s3.bmp.ovh/imgs/2022/06/30/3b077e14171fecf0.png" class="lazyload placeholder" data-srcset="https://s3.bmp.ovh/imgs/2022/06/30/3b077e14171fecf0.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></li><li>在浏览选项卡中搜索WebView2包，选择Microsoft.Web.WebView2包，并点击安装。</li></ol><p><img src="https://s3.bmp.ovh/imgs/2022/06/30/7aab6a8e832044a8.png" class="lazyload placeholder" data-srcset="https://s3.bmp.ovh/imgs/2022/06/30/7aab6a8e832044a8.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 class="bamboo-h " id="使用WebView2控件">使用WebView2控件</h2><br/><ol><li>打开项目中的<code>MainWindow.xaml</code>文件，然后添加WebView2的命名空间：</li></ol><pre class="line-numbers language-none"><code class="language-none">xmlns:webview2&#x3D;&quot;clr-namespace:Microsoft.Web.WebView2.Wpf;assembly&#x3D;Microsoft.Web.WebView2.Wpf&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>在<code>Grid</code>控件中，添加<code>WebView2</code>控件，并填写<code>Source</code>属性，这个属性是用来标识加载的网址，在这里我们填入百度的网址。</li></ol><pre class="line-numbers language-none"><code class="language-none">&lt;Window x:Class&#x3D;&quot;WebViewDemo.MainWindow&quot;        xmlns&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&#x2F;presentation&quot;        xmlns:d&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;expression&#x2F;blend&#x2F;2008&quot;        xmlns:x&#x3D;&quot;http:&#x2F;&#x2F;schemas.microsoft.com&#x2F;winfx&#x2F;2006&#x2F;xaml&quot;        xmlns:mc&#x3D;&quot;http:&#x2F;&#x2F;schemas.openxmlformats.org&#x2F;markup-compatibility&#x2F;2006&quot;        xmlns:webview2&#x3D;&quot;clr-namespace:Microsoft.Web.WebView2.Wpf;assembly&#x3D;Microsoft.Web.WebView2.Wpf&quot;        mc:Ignorable&#x3D;&quot;d&quot;        Title&#x3D;&quot;MainWindow&quot; Height&#x3D;&quot;450&quot; Width&#x3D;&quot;800&quot;&gt;    &lt;Grid&gt;        &lt;webview2:WebView2 Source&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot; &#x2F;&gt;    &lt;&#x2F;Grid&gt;&lt;&#x2F;Window&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后，附上一张运行截图<br><img src="https://s3.bmp.ovh/imgs/2022/06/30/1c409231579ac194.png" class="lazyload placeholder" data-srcset="https://s3.bmp.ovh/imgs/2022/06/30/1c409231579ac194.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 class="bamboo-h " id="结语">结语</h2><br/><p>至此，一个简单使用WebView2加载网页的Demo就已经完成，可以看出WebView2整体使用是比较简单的，也没有比较复杂的配置，其Nuget包提交也较小，在使用简单使用上比CefSharp还是有一定优势的，后续我们将深入使用WebView2,实现一些复杂功能，敬请期待！</p><p>使用WebView2的相关代码已经上传至GitHub中，有需要的可以自行下载，码字不易，顺手给个 Star 吧！</p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/znoliver/WebViewDemo"><img src="https://github-readme-stats.vercel.app/api/pin/?username=znoliver&repo=WebViewDemo&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=znoliver&repo=WebViewDemo&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a>]]></content>
      
      
      <categories>
          
          <category> WebView2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebView2 </tag>
            
            <tag> WPF </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WPF混合开发之WebView2(一) 简介及环境搭建</title>
      <link href="2022/06/28/wpf-hun-he-kai-fa-zhi-webview2-yi-jian-jie-ji-huan-jing-da-jian/"/>
      <url>2022/06/28/wpf-hun-he-kai-fa-zhi-webview2-yi-jian-jie-ji-huan-jing-da-jian/</url>
      
        <content type="html"><![CDATA[<h2 class="bamboo-h " id="引言">引言</h2><br/><p>在WPF开发中，经常会有混合开发的需求，即在WPF中加载网页，目前最常用也是最流行的方式是CefSharp，它的功能非常强大，可以提供较为完善的开发和使用体验，但是CefSharp也有一定的缺点，如体积过大，配置繁琐等。<br>值得兴奋的是，微软基于Edge浏览器推出了webview2控件，用于解决混合开发的痛点，下面就一起来了解一下吧！</p><h2 class="bamboo-h " id="WebView2系统要求">WebView2系统要求</h2><br/><p>WebView2是基于Microsoft Edge浏览器的，其对所使用的操作系统环境有一定要求，支持以下系统：</p><ul><li>Windows 11</li><li>Windows 10</li><li>Windows 10 IoT 企业版 LTSC x32 2019</li><li>Windows 10 IoT 企业版 LTSC x64 2019</li><li>Windows 10 IoT 企业版 21h1 x64</li><li>Windows 8.1</li><li>Windows 7 **</li><li>Windows Server 2019</li><li>Windows Server 2016</li><li>Windows Server 2012</li><li>Windows Server 2012 R2</li><li>Windows Server 2008 R2 **<div class="note info"><p>对于Windows 7 和 Windows Server 2008 R2支持是有一定限制的，详细可查看：<a href="https://docs.microsoft.com/zh-cn/deployedge/microsoft-edge-supported-operating-systems">微软文档</a>。</p></div></li></ul><h2 class="bamboo-h " id="WebView2下载安装">WebView2下载安装</h2><br/><p>WebView2提供了三种方式的安装，可根据需求进行<a href="https://developer.microsoft.com/zh-CN/microsoft-edge/webview2">下载</a>安装，详细对比请看下表：<br>| 常青版引导程序 | 常青版独立安装程序 | 已修复版本 |<br>| :—: | :—: | :—: |<br>| 安装程序引导包，双击后会自动下载最新的WebView2并安装到计算机中 | WebView2安装程序 | WebView2安装程序 |<br>| 跟随系统更新，更新版本不需再次安装 | 跟随系统更新，更新版本不需再次安装 | 安装的是特定版本，需控制版本，安装其他版本需要再次下载安装 |<br>| 体积极小 | 体积较大 | 体积较大 |<br>| 不可离线使用，必须联网| 可离线安装 | 可离线安装 |</p><p>推荐开发人员使用长青版安装程序，在此我选择常青版引导程序安装：</p><p><img src="https://s3.bmp.ovh/imgs/2022/06/28/5a7bdd789aa5b497.png" class="lazyload placeholder" data-srcset="https://s3.bmp.ovh/imgs/2022/06/28/5a7bdd789aa5b497.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><p>安装过程就不再赘述，一路点下一步即可，安装完成后可在<code>设置-&gt;应用-&gt;应用和功能</code>中查看安装的好的程序：<br><img src="https://s3.bmp.ovh/imgs/2022/06/28/d959d242ded24bc9.png" class="lazyload placeholder" data-srcset="https://s3.bmp.ovh/imgs/2022/06/28/d959d242ded24bc9.png" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p><h2 class="bamboo-h " id="结语">结语</h2><br/><p>至此，WebView2的环境已经搭建完毕。如果代码中有什么出错或者不清楚的地方，欢迎大家批评指正哦。</p>]]></content>
      
      
      <categories>
          
          <category> WebView2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WebView2 </tag>
            
            <tag> WPF </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.net core/.net 5中自动批量向容器中注入服务</title>
      <link href="2021/05/23/net-core-zhong-zi-dong-pi-liang-xiang-rong-qi-zhong-zhu-ru-fu-wu/"/>
      <url>2021/05/23/net-core-zhong-zi-dong-pi-liang-xiang-rong-qi-zhong-zhu-ru-fu-wu/</url>
      
        <content type="html"><![CDATA[<h2 class="bamboo-h " id="引言">引言</h2><br/><p>.net core 为我们提供了良好的容器机制，并可以简单的在 Configuration 方法中向容器中注入服务，但是当服务比较多的时候，就会使我们的注入过程变得很麻烦，不容易管理，所以就需要我们自己动手写一些代码，实现服务的管理以及自动注入。<br>关于这篇博客所写的代码，我已经上传至<a href="https://github.com/znoliver/AutoInjection">Github</a>，大家可以下载源码观看，如果觉得不错，顺手给个 Star 哦。</p><h2 class="bamboo-h " id="实现思路">实现思路</h2><br/><p>要实现自动注入，需要做好以下几件事：</p><ol><li>使容器可以自动发现需要注入的服务，并注册服务</li><li>服务需要标记自己需要的生命周期，方便容器注入</li><li>异常的处理</li></ol><p>针对以上问题，我需要首先定义一个<code>IServiceCollection</code>的扩展方法，可以在服务中使用我们的服务；其次，需要定义一个枚举，声明服务的生命周期；最后，我们需要定义一个属性，可以在服务类上使用，以便声明服务的声明周期等信息，使容器可以发现服务。</p><h2 class="bamboo-h " id="自动注入的实现">自动注入的实现</h2><br/><h3 class="bamboo-h-b" id="生命周期枚举类的定义" style="color:!important">生命周期枚举类的定义</h3><div></div><p>要定义生命周期枚举，首先需要了解一下.net 中的生命周期的机制，.net 中具有 3 种生命周期</p><ol><li><code>AddTransient</code>,暂时性生存期；</li><li><code>AddScoped</code>，范围内生存期；</li><li><code>AddSingleton</code>，单例生命期。</li></ol><div class="note info"><p>关于生命周期方面的知识不属于这篇文章的重点，在此不多做赘述，不太熟悉的可以去<a href="https://docs.microsoft.com/zh-cn/dotnet/core/extensions/dependency-injection#service-lifetimes">微软文档</a>查看。</p></div><p>根据 3 种生命周期，我们可以定义以下一个枚举类：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/// &lt;summary></span><span class="token comment">/// 注入类型</span><span class="token comment">/// &lt;/summary></span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">InjectionType</span><span class="token punctuation">&#123;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// Transient</span>    <span class="token comment">/// &lt;/summary></span>    Transient<span class="token punctuation">,</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// Scoped</span>    <span class="token comment">/// &lt;/summary></span>    Scoped<span class="token punctuation">,</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// Singleton</span>    <span class="token comment">/// &lt;/summary></span>    Singleton<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 class="bamboo-h-b" id="自动注入属性的实现" style="color:!important">自动注入属性的实现</h3><div></div><p>实现自定义属性，主要是为了使用方便，这样的话我们在服务类的定义时，就可以标记这个服务是用来怎样进行服务注册的，废话不多说，上代码：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/// &lt;summary></span><span class="token comment">/// 服务注入</span><span class="token comment">/// &lt;/summary></span><span class="token punctuation">[</span><span class="token function">AttributeUsage</span><span class="token punctuation">(</span>AttributeTargets<span class="token punctuation">.</span>Class<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceInjectionAttribute</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">Attribute</span></span><span class="token punctuation">&#123;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">///</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token return-type class-name">Type</span> InterfaceType <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// 注入类型</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token return-type class-name">InjectionType</span> InjectionType <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// 服务注入</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token keyword">public</span> <span class="token function">ServiceInjectionAttribute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>InjectionType <span class="token operator">=</span> InjectionType<span class="token punctuation">.</span>Scoped<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// 服务注入</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token comment">/// &lt;param name="injectionType">注入类型&lt;/param></span>    <span class="token keyword">public</span> <span class="token function">ServiceInjectionAttribute</span><span class="token punctuation">(</span><span class="token class-name">InjectionType</span> injectionType<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>InjectionType <span class="token operator">=</span> injectionType<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/// &lt;summary></span>    <span class="token comment">/// 服务注入</span>    <span class="token comment">/// &lt;/summary></span>    <span class="token comment">/// &lt;param name="interfaceType">服务的接口类型&lt;/param></span>    <span class="token comment">/// &lt;param name="injectionType">注入的类型&lt;/param></span>    <span class="token keyword">public</span> <span class="token function">ServiceInjectionAttribute</span><span class="token punctuation">(</span><span class="token class-name">Type</span> interfaceType<span class="token punctuation">,</span> <span class="token class-name">InjectionType</span> injectionType<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>InterfaceType <span class="token operator">=</span> interfaceType<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>InjectionType <span class="token operator">=</span> injectionType<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如代码所示，我们自定义的<code>ServiceInjectionAttribute</code>类继承于 C#的<code>Attribute</code>类，并且在上面标记了这个属性类的适用范围，只能标记在类上面。可以注意到，我们这个类有三种类型的构造函数。我们可以根据自己的使用需求来决定使用哪一种构造定义。</p><p>在我们的类中，有一个属性为<code>InterfaceType</code>，这个属性是指服务继承的接口类，根据这个属性我们注册服务的时，会使用这个接口进行注入。</p><div class="note info"><p>在这里面，我们定义了默认的生命周期为<code>Scoped</code>，如果没有定义继承的服务接口，则使用具体服务类所继承的第一个接口进行注册</p></div><h3 class="bamboo-h-b" id="服务扩展方法的实现" style="color:!important">服务扩展方法的实现</h3><div></div><p>这部份是实现自动注入的核心，它负责容器的组装，自动扫描我们需要注入的服务，代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/// &lt;summary></span><span class="token comment">/// 服务自动注入</span><span class="token comment">/// &lt;/summary></span><span class="token comment">/// &lt;param name="serviceCollection">需要自动注入服务的服务集合&lt;/param></span><span class="token comment">/// &lt;exception cref="ArgumentOutOfRangeException">指定的注入类型不在可注入的范围内&lt;/exception></span><span class="token comment">/// &lt;exception cref="NoImplementationInterfaceException">指定注入的类型未实现任何服务&lt;/exception></span><span class="token comment">/// &lt;exception cref="ArgumentException">输入的参数错误：1、注入的类型未实现指定的服务。2、指定的服务不是Interface类型&lt;/exception></span><span class="token comment">/// &lt;returns>自动注入服务后的服务集合&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IServiceCollection</span> <span class="token function">ServicesAutoInjection</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IServiceCollection</span> serviceCollection<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> directory <span class="token operator">=</span> AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> types <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> <span class="token string">"*.dll"</span><span class="token punctuation">,</span> SearchOption<span class="token punctuation">.</span>TopDirectoryOnly<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>Assembly<span class="token punctuation">.</span>LoadFrom<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>a <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Injection</span><span class="token punctuation">(</span>serviceCollection<span class="token punctuation">,</span> types<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> serviceCollection<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这个方法中我们可以看出，程序会扫描程序运行目录下的所有 Dll，并加载具有我们自定义属性的类，并根据我们标记的生命周期等属性，注入到我们的容器中。</p><p>但是，有时候，有一些 Dll 不需要我们扫描注入，需要进行排除，所以在这个基础上，我又封装了一层，可以传入过滤条件，代码如下：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">/// &lt;summary></span><span class="token comment">/// 服务自动注入</span><span class="token comment">/// &lt;/summary></span><span class="token comment">/// &lt;param name="serviceCollection">需要自动注入服务的服务集合&lt;/param></span><span class="token comment">/// &lt;param name="selector">应用于每个Assembly的筛选函数&lt;/param></span><span class="token comment">/// &lt;exception cref="ArgumentOutOfRangeException">指定的注入类型不在可注入的范围内&lt;/exception></span><span class="token comment">/// &lt;exception cref="NoImplementationInterfaceException">指定注入的类型未实现任何服务&lt;/exception></span><span class="token comment">/// &lt;exception cref="ArgumentException">输入的参数错误：1、注入的类型未实现指定的服务。2、指定的服务不是Interface类型&lt;/exception></span><span class="token comment">/// &lt;returns>自动注入服务后的服务集合&lt;/returns></span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token return-type class-name">IServiceCollection</span> <span class="token function">ServicesAutoInjection</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token class-name">IServiceCollection</span> serviceCollection<span class="token punctuation">,</span> <span class="token class-name">Func<span class="token punctuation">&lt;</span>Assembly<span class="token punctuation">,</span> <span class="token keyword">bool</span><span class="token punctuation">></span></span> selector<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token keyword">var</span></span> directory <span class="token operator">=</span> AppDomain<span class="token punctuation">.</span>CurrentDomain<span class="token punctuation">.</span>BaseDirectory<span class="token punctuation">;</span>    <span class="token class-name"><span class="token keyword">var</span></span> types <span class="token operator">=</span> Directory<span class="token punctuation">.</span><span class="token function">GetFiles</span><span class="token punctuation">(</span>directory<span class="token punctuation">,</span> <span class="token string">"*.dll"</span><span class="token punctuation">,</span> SearchOption<span class="token punctuation">.</span>TopDirectoryOnly<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">Select</span><span class="token punctuation">(</span>Assembly<span class="token punctuation">.</span>LoadFrom<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">SelectMany</span><span class="token punctuation">(</span>a <span class="token operator">=></span> a<span class="token punctuation">.</span><span class="token function">GetTypes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Injection</span><span class="token punctuation">(</span>serviceCollection<span class="token punctuation">,</span> types<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> serviceCollection<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上述代码中，<code>selector</code>就是我们的过滤条件，它是一个 Func 函数，参数为<code>Assembly</code>类型，我们可以根据类型或者一些信息排除我们不需要的类型，比如根据类的名称等信息。</p><h2 class="bamboo-h " id="自动注入的使用">自动注入的使用</h2><br/><h3 class="bamboo-h-b" id="服务的配置" style="color:!important">服务的配置</h3><div></div><p>首先需要我们在<code>Startup</code>中的<code>ConfigureServices</code>函数中配置服务，如下所示：</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">ConfigureServices</span><span class="token punctuation">(</span><span class="token class-name">IServiceCollection</span> services<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 声明为WebAPI，也可为AddMvc()或者其他</span>    services<span class="token punctuation">.</span><span class="token function">AddControllers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 配置其他服务</span>    <span class="token comment">// 配置自动注入服务</span>    services<span class="token punctuation">.</span><span class="token function">ServicesAutoInjection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 配置其他服务</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 class="bamboo-h-b" id="标记服务的注入" style="color:!important">标记服务的注入</h3><div></div><p>我们的服务的配置后，接下来的使用就比较简单了，找到我们的实现类，标记上我们自定义的属性标签，然后服务就可以通过我们的服务自动注入啦。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token attribute"><span class="token class-name">ServiceInjection</span><span class="token attribute-arguments"><span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token type-expression class-name">IService</span><span class="token punctuation">)</span><span class="token punctuation">,</span>InjectionType<span class="token punctuation">.</span>Scoped<span class="token punctuation">)</span></span></span><span class="token punctuation">]</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServiceImpl</span> <span class="token punctuation">:</span> <span class="token type-list"><span class="token class-name">IService</span></span><span class="token punctuation">&#123;</span><span class="token comment">// 业务代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 class="bamboo-h " id="结语">结语</h2><br/><p>通过我们自定义代码实现，服务就可以很简单的被容器发现并注册了，并且还做了简单的服务排除逻辑，如果代码中有什么出错的地方，欢迎大家批评指正哦。<br>码字不易，请顺手给个 Star 吧</p><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/znoliver/AutoInjection"><img src="https://github-readme-stats.vercel.app/api/pin/?username=znoliver&repo=AutoInjection&show_owner=true" class="lazyload placeholder" data-srcset="https://github-readme-stats.vercel.app/api/pin/?username=znoliver&repo=AutoInjection&show_owner=true" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"/></a>]]></content>
      
      
      <categories>
          
          <category> .Net </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> .net core </tag>
            
            <tag> .net 5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows 10家庭中文版中启用WSL 2</title>
      <link href="2021/05/13/windows-10-jia-ting-zhong-wen-ban-zhong-qi-yong-wsl-2/"/>
      <url>2021/05/13/windows-10-jia-ting-zhong-wen-ban-zhong-qi-yong-wsl-2/</url>
      
        <content type="html"><![CDATA[<h2 class="bamboo-h " id="使用 WSL 2 的系统要求">使用 WSL 2 的系统要求</h2><br/><ul><li>系统版本：Windows 10 1903 及以上版本。</li><li>系统内部版本： 18362 及以上。</li></ul><p>系统版本查看方式：</p><ol><li><p> 使用快捷键<code>Win+R</code>打开运行窗口，输入<code>winver</code>，确定，查看系统版本。<img src="https://img-blog.csdnimg.cn/20210302233228161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwMzY4MQ==,size_16,color_FFFFFF,t_70" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/20210302233228161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwMzY4MQ==,size_16,color_FFFFFF,t_70" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p></li><li><p>打开命令行窗口，输入<code>ver</code>，查看系统版本。<br> <img src="https://img-blog.csdnimg.cn/20210302233430431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwMzY4MQ==,size_16,color_FFFFFF,t_70" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/20210302233430431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwMzY4MQ==,size_16,color_FFFFFF,t_70" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p></li></ol><h2 class="bamboo-h " id="启用适用于 Linux 的 Windows 子系统">启用适用于 Linux 的 Windows 子系统</h2><br/><ol><li>已管理员身份运行 Windows PowerShell。</li><li>运行以下命令：<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span><span class="token function">enable-feature</span> <span class="token operator">/</span>featurename:Microsoft<span class="token operator">-</span>Windows<span class="token operator">-</span>Subsystem<span class="token operator">-</span>Linux <span class="token operator">/</span>all <span class="token operator">/</span>norestart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 class="bamboo-h " id="启用虚拟机功能">启用虚拟机功能</h2><br/><p>WSL 功能是基于 Windows 的虚拟化功能的，所以要使用 WSL，就需要先开启 Windows 的虚拟化功能，对于 Windows 专业版的系统，可以直接在启用或关闭 Windows 功能中启用虚拟机平台，如下图：<br><img src="https://img-blog.csdnimg.cn/20210302234314134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwMzY4MQ==,size_16,color_FFFFFF,t_70" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/20210302234314134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwMzY4MQ==,size_16,color_FFFFFF,t_70" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"><br>但是对于 Windows 家庭中文版的用户来说，并没有这个选项，这时候就需要我们手动开启这个功能：</p><ol><li>以管理员身份打开 PowerShell。</li><li>输入以下命令，并回车运行：<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">dism<span class="token punctuation">.</span>exe <span class="token operator">/</span>online <span class="token operator">/</span><span class="token function">enable-feature</span> <span class="token operator">/</span>featurename:VirtualMachinePlatform <span class="token operator">/</span>all <span class="token operator">/</span>norestart<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>重启计算机。</li></ol><h2 class="bamboo-h " id="更新 WSL 2 的 Linux 内核更新包">更新 WSL 2 的 Linux 内核更新包</h2><br/><p>&emsp;&emsp;适用于 x64 计算机的 WSL2 Linux 内核更新包，<a href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">点我下载。</a></p><h2 class="bamboo-h " id="设置 WSL 2 为默认的 wsl 版本">设置 WSL 2 为默认的 wsl 版本</h2><br/><ol><li>打开 Windows PowerShell，运行以下命令：</li><li>运行以下命令：<pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">wsl <span class="token operator">--</span><span class="token function">set-default</span><span class="token operator">-</span>version 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 class="bamboo-h " id="安装 Linux 系统">安装 Linux 系统</h2><br/><ol><li><p>打开 Microsoft Store。</p></li><li><p>点击右上角的搜索按钮，输入 Linux 进行搜索：<img src="https://img-blog.csdnimg.cn/20210303000918928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwMzY4MQ==,size_16,color_FFFFFF,t_70" class="lazyload placeholder" data-srcset="https://img-blog.csdnimg.cn/20210303000918928.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDIwMzY4MQ==,size_16,color_FFFFFF,t_70" srcset="https://img2.baidu.com/it/u=2037979560,2772131037&fm=26&fmt=auto&gp=0.jpg"></p></li><li><p>选择自己需要的 Linux 系统进行安装。</p></li><li><p>安装过程中，可能需为 Linux 创建一个新的用户并为这个用户设置用户密码，安装界面提示即可，需要注意的是，用<strong>户密码输入时，界面上不会进行显示，也不会有输入提示</strong>。</p></li></ol><h2 class="bamboo-h " id="参考资料">参考资料</h2><br/><p>本文借鉴于 Windows 的帮助文档：<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10">适用于 Linux 的 Windows 子系统安装指南 (Windows 10)</a></p>]]></content>
      
      
      <categories>
          
          <category> Windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> WSL 2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
